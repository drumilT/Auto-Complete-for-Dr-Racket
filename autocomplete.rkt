#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.2 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1629 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 12 #"racket/class"
0 0 24 3 1 #" "
0 0 14 3 12 #"racket/match"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket/list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 12 #"prefix-tree%"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 5 #"gnode"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";; add edit distance function style"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";; try making (hof tree prefix node-pred-list node-perform-list)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"gnode"
0 0 24 3 2 #" ("
0 0 14 3 8 #"alphabet"
0 0 24 3 1 #" "
0 0 14 3 9 #"frequency"
0 0 24 3 1 #" "
0 0 14 3 9 #"childlist"
0 0 24 3 2 #") "
0 0 23 3 13 #"#:transparent"
0 0 24 3 1 #" "
0 0 23 3 9 #"#:mutable"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"prefix-tree%"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"class"
0 0 24 3 1 #" "
0 0 14 3 7 #"object%"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"super-new"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 51 #";; a field to get the initial words to set the tree"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"init-field"
0 0 24 3 1 #" "
0 0 14 3 17 #"initial-word-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 38 #";; private variable to define the trie"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"main-trie"
0 0 24 3 2 #" ("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 21 3 7 #"#\\space"
0 0 24 3 1 #" "
0 0 21 3 6 #"+inf.0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 40 #";; temp for using map without displaying"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"te"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 40 #";; add all the initial words to the trie"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"te"
0 0 24 3 2 #" ("
0 0 14 3 12 #"insert-words"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 14 3 17 #"initial-word-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 38 #";; public function to display the trie"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 4 #"show"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 5 #"))) ("
0 0 14 3 12 #"all-suffixes"
0 0 24 3 1 #" "
0 0 14 3 9 #"main-trie"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 9 #"show-trie"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 14 3 9 #"main-trie"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 32 #";; public function to add a word"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 16 #"insert-word-freq"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"add-word-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 2 #"fr"
0 0 24 3 1 #" "
0 0 14 3 3 #"chl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 20 #"set-gnode-frequency!"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 2 #"fr"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 4 #"trie"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             )]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 2 #"fr"
0 0 24 3 1 #" "
0 0 14 3 3 #"chl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 12 #"insert-point"
0 0 24 3 2 #" ("
0 0 14 3 5 #"ormap"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 3 #") ("
0 0 14 3 14 #"gnode-alphabet"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                         "
0 0 14 3 3 #"chl"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 14 3 12 #"insert-point"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 20 #"set-gnode-childlist!"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 15 #"add-word-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #" ("
0 0 14 3 5 #"gnode"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                            "
0 0 14 3 3 #"chl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 4 #"trie"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 20 #"set-gnode-childlist!"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 15 #"add-word-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                           "
0 0 14 3 3 #"chl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 4 #"trie"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"             )]))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 15 #"add-word-helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 7 #"#\\space"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 2 #"  "
0 0 14 3 4 #"word"
0 0 24 3 3 #")) "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 9 #"main-trie"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 66
#";; public function to delete the frequency of a word from the trie"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 16 #"delete-word-freq"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 14 3 4 #"freq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"dwf-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 14 3 4 #"freq"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 2 #"fr"
0 0 24 3 1 #" "
0 0 14 3 3 #"chl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 20 #"set-gnode-frequency!"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 2 #" ("
0 0 14 3 3 #"max"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 2 #"fr"
0 0 24 3 1 #" "
0 0 14 3 4 #"freq"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 4 #"trie"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             )]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 2 #"fr"
0 0 24 3 1 #" "
0 0 14 3 3 #"chl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 20 #"set-gnode-childlist!"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 10 #"dwf-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"freq"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 3 #"chl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 4 #"trie"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"             )]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"dwf-helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 7 #"#\\space"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 3 #")) "
0 0 14 3 4 #"freq"
0 0 24 3 1 #" "
0 0 14 3 9 #"main-trie"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 5 #"prune"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 2 #"fr"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"fr"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 2 #"fr"
0 0 24 3 1 #" "
0 0 14 3 3 #"chl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 2 #"fr"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 3 #"res"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 5 #"prune"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 3 #"chl"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 6 #"(()) ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 2 #"fr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"remove*"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 14 3 3 #"res"
0 0 24 3 6 #"))]))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 11 #"delete-word"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 14 3 4 #"freq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 16 #"delete-word-freq"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 14 3 4 #"freq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"main-trie"
0 0 24 3 2 #" ("
0 0 14 3 5 #"prune"
0 0 24 3 1 #" "
0 0 14 3 9 #"main-trie"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 12 #"delete-words"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 11 #"delete-word"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"main-trie"
0 0 24 3 2 #" ("
0 0 14 3 5 #"prune"
0 0 24 3 1 #" "
0 0 14 3 9 #"main-trie"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 11 #"insert-word"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 14 3 4 #"freq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 16 #"insert-word-freq"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 14 3 4 #"freq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"main-trie"
0 0 24 3 2 #" ("
0 0 14 3 5 #"prune"
0 0 24 3 1 #" "
0 0 14 3 9 #"main-trie"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 12 #"insert-words"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 11 #"insert-word"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"main-trie"
0 0 24 3 2 #" ("
0 0 14 3 5 #"prune"
0 0 24 3 1 #" "
0 0 14 3 9 #"main-trie"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 57 #";; private function that gets all suffixes from this node"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 14 #"define/private"
0 0 24 3 2 #" ("
0 0 14 3 12 #"all-suffixes"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 4 #"freq"
0 0 24 3 1 #" "
0 0 14 3 3 #"chl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 4 #"freq"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 2 #") "
0 0 14 3 4 #"freq"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"append-map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 12 #"all-suffixes"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #")) "
0 0 14 3 3 #"chl"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 4 #"freq"
0 0 24 3 1 #" "
0 0 14 3 3 #"chl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"append-map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 12 #"all-suffixes"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #")) "
0 0 14 3 3 #"chl"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"Suffix not a gnode\""
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 64
#";; public function that finds all completions for a given prefix"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 13 #"define/public"
0 0 24 3 2 #" ("
0 0 14 3 19 #"get-all-completions"
0 0 24 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 26 #"get-all-completions-helper"
0 0 24 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 24 3 1 #" "
0 0 14 3 12 #"build-prefix"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 1 #" "
0 0 14 3 12 #"build-prefix"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 12 #"all-suffixes"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 14 3 4 #"trie"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"trie"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 3 #"fre"
0 0 24 3 1 #" "
0 0 14 3 3 #"chl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 23 3 6 #"#:when"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 7 #"#\\space"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"append-map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 26 #"get-all-completions-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 12 #"build-prefix"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 3 #"chl"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"chl"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()) ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 3 #"fre"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->string"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 12 #"build-prefix"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"fre"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"append-map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 26 #"get-all-completions-helper"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 12 #"build-prefix"
0 0 24 3 2 #") "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 14 3 3 #"chl"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 5 #"gnode"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 3 #"chl"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"append-map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"z"
0 0 24 3 3 #") ("
0 0 14 3 26 #"get-all-completions-helper"
0 0 24 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"alp"
0 0 24 3 1 #" "
0 0 14 3 12 #"build-prefix"
0 0 24 3 2 #") "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 3 #"chl"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()])]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()]))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 24 3 2 #" ("
0 0 14 3 26 #"get-all-completions-helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 7 #"#\\space"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 6 #"prefix"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 14 3 9 #"main-trie"
0 0 24 3 2 #") "
0 0 23 3 5 #"#:key"
0 0 24 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 3 #")))"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 19 #"read-hist-word-list"
0 0 17 3 1 #" "
0 0 17 3 9 #"file-path"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:pick?"
0 0 17 3 2 #" ["
0 0 17 3 6 #"choice"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 6 #"word])"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 3 #"  ("
0 0 17 3 20 #"call-with-input-file"
0 0 17 3 10 #" file-path"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"    ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 4 #"fin)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 7 #"      ("
0 0 17 3 8 #"for/list"
0 0 17 3 3 #" (["
0 0 17 3 10 #"word-count"
0 0 17 3 2 #" ("
0 0 17 3 8 #"in-lines"
0 0 17 3 1 #" "
0 0 17 3 6 #"fin)])"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 9 #"        ("
0 0 17 3 3 #"let"
0 0 17 3 3 #" (["
0 0 17 3 8 #"wc-split"
0 0 17 3 2 #" ("
0 0 17 3 12 #"string-split"
0 0 17 3 1 #" "
0 0 17 3 10 #"word-count"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:trim?"
0 0 17 3 1 #" "
0 0 17 3 5 #"#t)])"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 11 #"          ("
0 0 17 3 5 #"match"
0 0 17 3 7 #" choice"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"            ["
0 0 17 3 1 #"'"
0 0 17 3 4 #"word"
0 0 17 3 4 #"   ("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 10 #"wc-split)]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"            ["
0 0 17 3 1 #"'"
0 0 17 3 6 #"counts"
0 0 17 3 2 #" ("
0 0 17 3 14 #"string->number"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cadr"
0 0 17 3 1 #" "
0 0 17 3 11 #"wc-split))]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 13 #"            ["
0 0 17 3 1 #"'"
0 0 17 3 4 #"both"
0 0 17 3 4 #"   ("
0 0 17 3 4 #"cons"
0 0 17 3 2 #" ("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 9 #"wc-split)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 28 #"                           ("
0 0 17 3 14 #"string->number"
0 0 17 3 2 #" ("
0 0 17 3 4 #"cadr"
0 0 17 3 1 #" "
0 0 17 3 18 #"wc-split)))]))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 11 #" dictionary"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 4 #"   ("
0 0 17 3 19 #"read-hist-word-list"
0 0 17 3 1 #" "
0 0 17 3 36 #"\"../google-books-common-words.txt\"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 6 #"define"
0 0 17 3 11 #" dictionary"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 4 #"   ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"apple\""
0 0 17 3 1 #" "
0 0 17 3 5 #"\"ant\""
0 0 17 3 1 #" "
0 0 17 3 7 #"\"aloha\""
0 0 17 3 1 #" "
0 0 17 3 8 #"\"always\""
0 0 17 3 1 #" "
0 0 17 3 11 #"\"almight\"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"my-trie"
0 0 24 3 2 #" ("
0 0 14 3 3 #"new"
0 0 24 3 1 #" "
0 0 14 3 12 #"prefix-tree%"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 17 #"initial-word-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";(define editor-trie (new prefix-tree% [initial-word-list '()"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";                                       ]))"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(define autocompletion-cursor<%>"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";  (interface ()"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";    get-completions  ;      -> (listof string)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";    get-length       ;      -> int"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";    empty?           ;      -> boolean"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";    narrow           ; char -> autocompletion-cursor<%>"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";    widen))          ; char -> autocompletion-cursor<%>"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;; string -> (values (string -> real) natural)"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;; produce a ranking function and a max normal score"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;; the ranking function is as follows:"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;; w |-> +inf.0 if `prefix' is a prefix of w"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;; w |-> 1000 if `prefix' appears in w"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;; w |-> n if n parts of `prefix' appear in w as first segments"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;; the max normal score is the largest n that the last clause can p"
 #"roduce"
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #";;(define (rank prefix)"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;  (define splitters \"[-/:_!]\")"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;  (define parts (regexp-split splitters prefix))"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";;  (define re (regexp (string-append \"^\" (regexp-quote prefix))))"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;  (values (\316\273 (w) (cond"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";;                   [(regexp-match re w) +inf.0]"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;                   ;; it's a very good match prefix appears in the"
 #" word"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#";;                   [(regexp-match (regexp-quote prefix) w) 1000]"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;                   ;; otherwise, we iterate and check each compone"
 #"nt of"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";;                   [else"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;                    (for/fold ([c 0]) ([r parts])"
0 0 24 29 1 #"\n"
0 0 17 3 52 #";;                      (define rq (regexp-quote r))"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;                      (cond [(regexp-match (string-append \"^\" rq"
 #") w)"
) 0 0 24 29 1 #"\n"
0 0 17 3 39 #";;                             (+ 1 c)]"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;                            [(regexp-match (string-append splitter"
 #"s rq) w)"
) 0 0 24 29 1 #"\n"
0 0 17 3 39 #";;                             (+ 1 c)]"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;                            [else c]))]))"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;          (length parts)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;; ============================================================"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;; autocompletion-cursor<%> implementation"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";(define autocompletion-cursor%"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";  (class* object% (autocompletion-cursor<%>)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 29 #";    (init-field word)       "
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 49 #";    ;(define-values (rnk max-count) (rank word))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";    ;; this determines the fuzziness"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";    ;; if we set mx to +inf.0, we get just the prefix matches"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";    ;; if we set mx to 1000, we get just the matches somewhere in t"
 #"he word"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";    ;; this definition is fuzzier the more parts there are in the w"
 #"ord"
) 0 0 24 29 1 #"\n"
0 0 17 3 22 #";;    (define mx (cond"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;                 [(<= max-count 2) max-count]"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";;                 [(<= max-count 4) (- max-count 1)]"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";;                 [else (- max-count 2)]))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";;   "
0 0 24 29 1 #"\n"
0 0 17 3 64
#";    ;; all the possible completions for `word', in ranked order"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";    (define all-completions"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";      (send editor-trie get-all-completions word))"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 61
#";    (define all-completions-length (length all-completions))"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 35 #";    (define/public (narrow prefix)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";      (set! word prefix)"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";      this)"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 34 #";    (define/public (widen prefix)"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";      (let ([strlen (string-length word)])"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";        (cond"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";          [(< strlen 2) #f]"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";          [else"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";           (set! word prefix)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";           this])))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;           (new autocompletion-cursor%"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;                [word (substring word 0 (- (string-length word) 1)"
 #")]"
) 0 0 24 29 1 #"\n"
0 0 17 3 44 #";;                [all-words all-words])])))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";;   "
0 0 24 29 1 #"\n"
0 0 17 3 54 #";    (define/public (get-completions) all-completions)"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";    (define/public (get-length) all-completions-length)"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";    (define/public (empty?) (eq? (get-length) 0))"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";   "
0 0 24 29 1 #"\n"
0 0 17 3 18 #";    (super-new)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0           0
